{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topCaption","bottomCaption","fontSize","randomImg","allMemeImgs","handleChange","bind","assertThisInitialized","handleClick","_this2","fetch","then","response","json","memes","data","setState","event","_event$target","target","name","value","defineProperty","newRandomImg","Math","floor","random","length","url","console","log","for","type","placeholder","onChange","onClick","src","alt","style","toUpperCase","Component","App","src_Header","src_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9cbd852.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header className=\"text-white text-center bg-dark p-5\">\r\n      \t<h1>Meme Generator</h1>\r\n      \t<p>By Felipe Belgine</p>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, {Component} from \"react\"\r\nimport './index.css';\r\n\r\nclass MemeGenerator extends Component  {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\r\n\t\tthis.state = {\r\n\t\t\ttopCaption: \"\",\r\n\t\t\tbottomCaption: \"\",\r\n\t\t\tfontSize: 46,\r\n\t\t\trandomImg: \"\",\r\n\t\t\tallMemeImgs: []\r\n\t\t}\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => { \r\n            \tconst {memes} = response.data\r\n                this.setState({\r\n                    allMemeImgs: memes\r\n                })\r\n            })       \r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    handleClick(event) {\r\n    \tconst newRandomImg = this.state.allMemeImgs[Math.floor(Math.random()*this.state.allMemeImgs.length)].url\r\n        this.setState({\r\n            randomImg: newRandomImg\r\n        })\r\n        console.log(newRandomImg)\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container p-5\">\r\n\t\t\t    <div className=\"row\">\r\n\t\t\t      <form className=\"col-sm-6 memeForm\">\r\n\t\t\t      \t<div className=\"form-group\">\r\n\t\t\t      \t\t<label for=\"topCaption\">Top Caption:</label>\r\n\t\t\t      \t\t<input \r\n\t\t\t\t\t      \tclassName=\"form-control\" \r\n\t\t\t\t\t      \ttype=\"text\" \r\n\t\t\t\t\t      \tname=\"topCaption\" \r\n\t\t\t\t\t      \tvalue={this.state.topCaption} \r\n\t\t\t\t\t      \tplaceholder=\"Start typing...\" \r\n\t\t\t\t\t      \tonChange={this.handleChange} \r\n\t\t\t      \t\t/>\r\n\t\t\t      \t</div>\r\n\t\t\t      \t<div className=\"form-group\">\r\n\t\t\t      \t\t<label for=\"bottomCaption\">Bottom Caption:</label>\r\n\t\t\t      \t\t<input \r\n\t\t\t\t\t      \tclassName=\"form-control\" \r\n\t\t\t\t\t      \ttype=\"text\" \r\n\t\t\t\t\t      \tname=\"bottomCaption\" \r\n\t\t\t\t\t      \tvalue={this.state.bottomCaption} \r\n\t\t\t\t\t      \tplaceholder=\"Start typing...\" \r\n\t\t\t\t\t      \tonChange={this.handleChange} \r\n\t\t\t      \t\t/>\r\n\t\t\t      \t</div>\r\n\t\t\t      \t<div className=\"form-group\">\r\n\t\t\t      \t\t<label for=\"fontSize\">Change Font Size (in pixels):</label>\r\n\t\t\t\t      \t<input \r\n\t\t\t\t      \t\tclassName=\"form-control\" \r\n\t\t\t\t      \t\ttype=\"number\" \r\n\t\t\t\t      \t\tname=\"fontSize\" \r\n\t\t\t\t      \t\tvalue={this.state.fontSize}\r\n\t\t\t\t      \t\tplaceholder={this.state.fontSize}\r\n\t\t\t\t      \t\tonChange={this.handleChange} \r\n\t\t\t\t      \t/>\r\n\t\t\t      \t</div>\r\n\t\t\t      \t<button \r\n\t\t\t      \t\ttype=\"button\" \r\n\t\t\t      \t\tname=\"btnRandomImg\" \r\n\t\t\t      \t\tonClick={this.handleClick}\r\n\t\t\t      \t>Get Another Random Image</button>\r\n\r\n\r\n\t\t\t      </form>\r\n\t\t\t      <div className=\"col-sm-6 meme\">\r\n\t\t\t      \t\t<img className=\"img-fluid w-100\" src={this.state.randomImg} alt=\"\"/>\r\n\t\t\t      \t\t<div className=\"card-img-overlay d-flex flex-column text-break\">\r\n\t\t      \t\t\t\t<h2 \r\n\t\t      \t\t\t\t\tclassName=\"topCaption text-white mb-auto\" \r\n\t\t      \t\t\t\t\tstyle={{'fontSize': this.state.fontSize + 'px'}}>\r\n\t\t      \t\t\t\t\t{this.state.topCaption.toUpperCase()}\r\n\t\t      \t\t\t\t</h2>\r\n\t\t      \t\t\t\t<h2 \r\n\t\t\t      \t\t\t\tclassName=\"bottomCaption text-white\" \r\n\t\t\t      \t\t\t\tstyle={{fontSize: this.state.fontSize  + 'px'}}>\r\n\t\t\t      \t\t\t\t{this.state.bottomCaption.toUpperCase()}\r\n\t\t      \t\t\t\t</h2>\r\n\t\t\t      \t\t</div>\r\n\t\t\t      </div>\r\n\t\t\t    </div>\r\n\t\t    </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MemeGenerator;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header'\r\nimport MemeGenerator from './MemeGenerator'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <MemeGenerator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}